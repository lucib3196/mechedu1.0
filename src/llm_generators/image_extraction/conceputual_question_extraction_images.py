import asyncio
from typing import List
from pydantic import BaseModel, Field

import os
from .fetch_response_image_extraction import fetch_structured_response_from_images

class ConceptualQuestion(BaseModel):
    question: str = Field(..., description="A conceptual question based on the lecture material that does not require any computation. Format any mathematical symbols or equations using LaTeX.")
    multiple_choice_options: List[str] = Field(..., description="Four multiple-choice options for the conceptual question. Format any mathematical symbols or equations using LaTeX.")
    correct_answer: str = Field(..., description="The correct option from the multiple-choice options. Format any mathematical symbols or equations using LaTeX.")
    source: str = Field(..., description="The source from which this question is derived.")
    generated: bool = Field(..., description="Whether the question was generated or extracted from the lecture material.")

class Questions(BaseModel):
    questions: List[ConceptualQuestion] = Field(..., description="A list of conceptual questions based on the lecture material")

# Define the JSON schema for the response format
schema = Questions.model_json_schema()
response_format = {
    "type": "json_schema",
    "json_schema": {
        "name": "lecture_analysis",
        "schema": schema
    }
}

async def conceptual_question_extraction_images(image_paths: List[str]) -> dict:
    """
    Extracts conceptual questions from lecture images using an AI model.

    Args:
        image_paths (List[str]): A list of paths to the lecture images.

    Returns:
        dict: The structured response containing the conceptual questions.
    """
    prompt = """
    You are tasked with analyzing the following lecture slides covering a specific class topic. Please address the following:

    1. **Conceptual Questions**: Generate 4 multiple-choice conceptual questions based on the lecture material, each with 4 options. Indicate the correct answer for each question.
    These questions can either be derived based on the information from the lecture slides or they can be generated by you. If you decide to generate, you need to indicate this in the response as a bool.
    Always return the sources of where these questions are derived from.
    
    Format any mathematical symbols or equations using LaTeX.
    """
    response = await fetch_structured_response_from_images(image_paths, prompt, response_format)
    return response

async def main():
    try:
        print("Please enter the absolute path to the image file:")
        image_path = input()
        # Validate the provided path
        if not os.path.isabs(image_path):
            raise ValueError("The provided path is not an absolute path.")
        if not os.path.isfile(image_path):
            raise FileNotFoundError(f"No file found at {image_path}. Please provide a valid image file path.")
        image_paths = [f"{image_path}"]
        print(image_paths)
        print("Processing the image and sending the request. Please wait...")
        result = await conceptual_question_extraction_images(image_paths=image_paths)
        print("\nRequest completed successfully. Here is the result:")
        print(result)

    except ValueError as ve:
        print(f"Value Error: {ve}")
    except FileNotFoundError as fnfe:
        print(f"File Not Found Error: {fnfe}")
    except Exception as e:
        print(f"An unexpected error occurred: {e}")
    

if __name__ == "__main__":
    asyncio.run(main())